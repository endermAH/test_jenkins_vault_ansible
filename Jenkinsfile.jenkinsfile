pipeline {
   agent any

   stages {
     stage('Get code'){
         steps {
             git 'https://github.com/endermAH/test_jenkins_vault_ansible'
         }
     }
    stage('Create keys') {
         steps {
            script {
                def secrets = [
                    [
                        path: 'kv/environments/${ENVIRONMENT}/vm1',
                        engineVersion: 2,
                        secretValues: [
                            [envVar: 'vm1_ansible_key', vaultKey: 'ansible_key'],
                            ]
                    ],
                    [
                        path: 'kv/environments/${ENVIRONMENT}/vm2',
                        engineVersion: 2,
                        secretValues: [
                            [envVar: 'vm2_ansible_key', vaultKey: 'ansible_key'],
                            ]
                    ],
                    ]

                def configuration = [vaultUrl: 'http://10.109.20.235:8200',
                         vaultCredentialId: 'vault-root-token',
                         engineVersion: 2]

                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh 'touch vm1_rsa'
                    writeFile([file: 'vm1_rsa', text: vm1_ansible_key])
                    sh 'touch vm2_rsa'
                    writeFile([file: 'vm2_rsa', text: vm2_ansible_key])
                    sh 'chmod 600 vm1_rsa; chmod 600 vm2_rsa'
                }
            }
         }
      }
      stage('Create inventory'){
          steps {
              script {
                  def secrets = [
                    [
                        path: 'kv/environments/${ENVIRONMENT}/vm1',
                        engineVersion: 2,
                        secretValues: [
                            [envVar: 'vm1_ansible_user', vaultKey: 'ansible_user'],
                            [envVar: 'vm1_ansible_host', vaultKey: 'ansible_host'],
                            ]
                    ],
                    [
                        path: 'kv/environments/${ENVIRONMENT}/vm2',
                        engineVersion: 2,
                        secretValues: [
                            [envVar: 'vm2_ansible_user', vaultKey: 'ansible_user'],
                            [envVar: 'vm2_ansible_host', vaultKey: 'ansible_host'],
                            ]
                    ],
                    ]

                def configuration = [vaultUrl: 'http://10.109.20.235:8200',
                         vaultCredentialId: 'vault-root-token',
                         engineVersion: 2]

                withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh 'touch inventory.ini'
                        sh 'echo [all] > inventory.ini'
                        sh 'echo $vm1_ansible_host\\ ansible_user=$vm1_ansible_user\\ ansible_ssh_private_key_file=vm1_rsa >> inventory.ini'
                        sh 'echo $vm2_ansible_host\\ ansible_user=$vm2_ansible_user\\ ansible_ssh_private_key_file=vm2_rsa >> inventory.ini'
                }
            }
         }
      }

      stage('Start playbook'){
        steps{
          withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: 'vault-root-token']]) {
            ansiColor('xterm') {
                ansiblePlaybook(
                    playbook: 'test_playbook.yml',
                    inventory: 'inventory.ini',
                    extraVars: 'vault_token=$VAULT_TOKEN',
                    //extras: '--private-key vm1_rsa'
                    colorized: true)
              }
          }
       }
    }

    stage('Clean workspace'){
      steps{
        script{
          cleanWs()
        }
      }
    }
   }
}
